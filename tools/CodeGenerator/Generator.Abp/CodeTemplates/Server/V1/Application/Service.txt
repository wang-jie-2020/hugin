using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using @{@Model.FullNameSpace}.Permissions;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Swashbuckle.AspNetCore.Annotations;
using Volo.Abp;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Data;
using Volo.Abp.Domain.Repositories;

namespace @{@Model.FullNameSpace}.impl
{
    [SwaggerTag("@{@Model.EntityDisplayName}")]
    [Authorize(@{@Model.GroupName}Permissions.@{@Model.EntityName}.Default)]
    public class @{@Model.EntityName}AppService
        : @(@Model.HasStop ? "BaseCrudStopAppService" :"BaseCrudAppService")<@{@Model.EntityName}, Guid, @{@Model.EntityName}Dto, @{@Model.EntityName}QueryInput, @{@Model.EntityName}EditDto, @{@Model.EntityName}EditOutput, @{@Model.EntityName}EditInput>,
            I@{@Model.EntityName}AppService
    {
        private readonly IRepository<@{@Model.EntityName}, Guid> _@{@Model.EntityNameLower}Repository;

        public @{@Model.EntityName}AppService(IRepository<@{@Model.EntityName}, Guid> @{@Model.EntityNameLower}Repository) : base(@{@Model.EntityNameLower}Repository)
        {
            _@{@Model.EntityNameLower}Repository = @{@Model.EntityNameLower}Repository;
        }

        ///// <summary>
        ///// 创建
        ///// </summary>
        ///// <param name="input"></param>
        ///// <returns></returns>
        //[Authorize(@{@Model.GroupName}Permissions.@{@Model.EntityName}.Create)]
        //[RemoteService]
        //public override Task<@{@Model.EntityName}Dto> CreateAsync(@{@Model.EntityName}EditInput input)
        //{
        //    return base.CreateAsync(input);
        //}

        ///// <summary>
        ///// 更新
        ///// </summary>
        ///// <param name="id"></param>
        ///// <param name="input"></param>
        ///// <returns></returns>
        //[Authorize(@{@Model.GroupName}Permissions.@{@Model.EntityName}.Edit)]
        //[RemoteService]
        //public override Task<@{@Model.EntityName}Dto> UpdateAsync(Guid id, @{@Model.EntityName}EditInput input)
        //{
        //    return base.UpdateAsync(id, input);
        //}

        ///// <summary>
        ///// 删除
        ///// </summary>
        ///// <param name="id"></param>
        ///// <returns></returns>
        //[Authorize(@{@Model.GroupName}Permissions.@{@Model.EntityName}.Delete)]
        //[RemoteService]
        //public override Task DeleteAsync(Guid id)
        //{
        //    return base.DeleteAsync(id);
        //}

        ///// <summary>
        ///// 停用
        ///// </summary>
        ///// <param name="id"></param>
        ///// <returns></returns>
        //[Authorize(@{@Model.GroupName}Permissions.@{@Model.EntityName}.Stop)]
        //[RemoteService]
        //public override Task Stop(Guid id)
        //{
        //    return base.Stop(id);
        //}

        ///// <summary>
        ///// 取消停用
        ///// </summary>
        ///// <param name="id"></param>
        ///// <returns></returns>
        //[Authorize(@{@Model.GroupName}Permissions.@{@Model.EntityName}.Stop)]
        //[RemoteService]
        //public override Task CancelStop(Guid id)
        //{
        //    return base.CancelStop(id);
        //}
    }
}
